class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
       int m=obstacleGrid.size();
        if(m<1) return 0;
        int n=obstacleGrid[0].size();
        if(n<1) return 0;

        vector<vector<int>> res=obstacleGrid;
        if(obstacleGrid[0][0]) return 0;
        res[0][0]=1;
        for(int j=1;j<n;j++)
        res[0][j]=obstacleGrid[0][j]?0:res[0][j-1];
        for(int i=1;i<m;i++)
        res[i][0]=obstacleGrid[i][0]?0:res[i-1][0];

        for(int i=1;i<m;i++)
        for(int j=1;j<n;j++)
        res[i][j]=obstacleGrid[i][j]?0:(res[i-1][j]+res[i][j-1]);

        return res[m-1][n-1];
    }
};

//python
class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m,n=len(obstacleGrid),len(obstacleGrid[0])
        dp=[[0]*n]*m
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j]==1:
                    dp[i][j]=0
                elif i==0 and j==0:
                    dp[i][j]=1
                elif i==0:
                    dp[i][j]=dp[i][j-1]
                elif j==0:
                    dp[i][j]=dp[i-1][j]
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]
            
        
