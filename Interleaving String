class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.empty()&&s2.empty()&&s3.empty()) return true;
        int n1=s1.size(),n2=s2.size(),n3=s3.size();
        if(n1+n2!=n3) return false;
        vector<vector<bool>> dp(n1+1,vector<bool>(n2+1,false));
        dp[0][0]=true;
        //boundary
        for(int i=1;i<=n1;i++){
            if(s1[i-1]==s3[i-1]&&dp[i-1][0]) dp[i][0]=true;
        }
        for(int i=1;i<=n2;i++){
            if(s2[i-1]==s3[i-1]&&dp[0][i-1]) dp[0][i]=true;
        }
        //dp matrix
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if((s1[i-1]==s3[i+j-1]&&dp[i-1][j])||(s2[j-1]==s3[i+j-1]&&dp[i][j-1])) dp[i][j]=true;
            }
        }
        return dp[n1][n2];
    }
};

//python
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        l1,l2,l3=len(s1),len(s2),len(s3)
        if l1+l2!=l3:
            return False
        dp = [[False for i in range(l2+1)] for j in range(l1+1)]
        dp[0][0]=True
        for i in range(1,l1+1):
            if dp[i-1][0] and s1[i-1]==s3[i-1]:
                dp[i][0]=True
        for i in range(1,l2+1):
            if dp[0][i-1] and s2[i-1]==s3[i-1]:
                dp[0][i]=True
        for i in range(1,l1+1):
            for j in range(1,l2+1):
                if (dp[i-1][j] and s1[i-1]==s3[i+j-1]) or (dp[i][j-1] and s2[j-1]==s3[i+j-1]):
                    dp[i][j]=True
        return dp[l1][l2]
        
