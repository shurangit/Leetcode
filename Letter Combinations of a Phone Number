class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.empty()) return res;
        string nums[10]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        string s;
        combine(digits,res,nums,0,s);
        return res;
    }
    void combine(string &digits, vector<string> &res,string nums[], int i, string s){
        if(i>=digits.size()) {
            res.push_back(s);
            return;
        }
        string tmp=nums[digits[i]-'0'];
        for(int j=0;j<tmp.size();j++){
            combine(digits,res,nums,i+1,s+tmp[j]);
        }
    }
};

//python
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        nums={"0":"","1":"","2":"abc","3":"def","4":"ghi","5":"jkl","6":"mno","7":"pqrs","8":"tuv","9":"wxyz"}
        res=[]
        if not digits:
            return res
        self.helper(digits,nums,res,"",0)
        return res
        
        
    def helper(self,digits,nums,res,s,start):
        if len(s)==len(digits):
            res.append(s)
            return
        for j in nums[digits[start]]:
            self.helper(digits,nums,res,s+j,start+1)
        
