class Solution {
public:
    int numDistinct(string s, string t) {
        int m=t.size(), n=s.size();
        //set dp[i][j]=> no. of T[0...i-1] in S[0...j-1]
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        for(int i=0;i<n+1;i++){
            dp[0][i]=1; //null is substring of all strings
        }
        for(int i=1;i<m+1;i++){
            for(int j=1;j<n+1;j++){
                if(t[i-1]!=s[j-1]) dp[i][j]=dp[i][j-1];
                else dp[i][j]=dp[i-1][j-1]+dp[i][j-1];
            }
        }
        return dp[m][n];
        
    }
};
//python
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        l1,l2,l3=len(s1),len(s2),len(s3)
        if l1+l2!=l3:
            return False
        dp = [[False for i in range(l2+1)] for j in range(l1+1)]
        dp[0][0]=True
        for i in range(1,l1+1):
            if dp[i-1][0] and s1[i-1]==s3[i-1]:
                dp[i][0]=True
        for i in range(1,l2+1):
            if dp[0][i-1] and s2[i-1]==s3[i-1]:
                dp[0][i]=True
        for i in range(1,l1+1):
            for j in range(1,l2+1):
                if (dp[i-1][j] and s1[i-1]==s3[i+j-1]) or (dp[i][j-1] and s2[j-1]==s3[i+j-1]):
                    dp[i][j]=True
        return dp[l1][l2]
        
